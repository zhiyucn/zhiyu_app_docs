import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.BvL8IJPA.js";const g=JSON.parse('{"title":"创建API插件 / Making a API Plugin","description":"","frontmatter":{},"headers":[],"relativePath":"LDownload/plugins/making_a_API_plugin.md","filePath":"LDownload/plugins/making_a_API_plugin.md"}'),l={name:"LDownload/plugins/making_a_API_plugin.md"};function p(e,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="创建api插件-making-a-api-plugin" tabindex="-1">创建API插件 / Making a API Plugin <a class="header-anchor" href="#创建api插件-making-a-api-plugin" aria-label="Permalink to &quot;创建API插件 / Making a API Plugin&quot;">​</a></h1><h2 id="介绍-introduction" tabindex="-1">介绍 / Introduction <a class="header-anchor" href="#介绍-introduction" aria-label="Permalink to &quot;介绍 / Introduction&quot;">​</a></h2><p>LDownload插件扩展功能于2024/12/8日支持了自制API的功能，形式为插件</p><h2 id="开始-getting-started" tabindex="-1">开始 / Getting Started <a class="header-anchor" href="#开始-getting-started" aria-label="Permalink to &quot;开始 / Getting Started&quot;">​</a></h2><h3 id="准备-preparation" tabindex="-1">准备 / Preparation <a class="header-anchor" href="#准备-preparation" aria-label="Permalink to &quot;准备 / Preparation&quot;">​</a></h3><ul><li>可以看懂文字的脑子</li><li>Python变量、函数、模块的概念</li><li>电脑</li><li>文本编辑器</li><li>Python 3.10+</li></ul><h3 id="步骤-steps" tabindex="-1">步骤 / Steps <a class="header-anchor" href="#步骤-steps" aria-label="Permalink to &quot;步骤 / Steps&quot;">​</a></h3><p>一.创建一个插件，自己去看init_a_plugin.md<br> 二.创建好后，一般是像这样</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pass</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;This is a API plugin&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> need</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject_class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span></code></pre></div><p>三.先将inject_class()返回值改成True，表示这个插件是会注入自己所有得类到主程序中 四.创建一个类</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_api_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span></code></pre></div><p>这时API插件就完成了，让我们来看看怎么调用</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyAPI):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    api </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyAPI()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    api.my_api_function()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;我要调用API插件的功能&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> need</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyAPI&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject_class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span></code></pre></div><p>将这两个插件放到plugins目录下，启动！</p><h2 id="注意事项-tips" tabindex="-1">注意事项 / Tips <a class="header-anchor" href="#注意事项-tips" aria-label="Permalink to &quot;注意事项 / Tips&quot;">​</a></h2><p>API插件暂时没有需要注意的地方，init_a_plugin.md里的注意事项都是GUI的，我就没听说过API插件要GUI的。</p>`,16)]))}const c=i(l,[["render",p]]);export{g as __pageData,c as default};
